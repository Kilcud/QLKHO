@page "/qlkho/doi-mat-khau"
@attribute [Authorize]

@inject IDbContextFactory<QLKHOContext> DbFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService Noti
@inject NavigationManager Nav
@using QLKHO.Services          
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

<AuthorizeView>
    <Authorized Context="auth">
<PageTitle>Đổi mật khẩu</PageTitle>

<RadzenCard Style="max-width:500px;margin:auto;margin-top:2rem">
    <ChildContent>
        <h3 class="text-center m-0">Đổi mật khẩu</h3>

        <EditForm Model="@model" OnValidSubmit="HandleChangeAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <RadzenTemplateFormData>
                <RadzenPassword @bind-Value="model.OldPassword"  Placeholder="Mật khẩu cũ"   Style="width:100%" />
                <ValidationMessage For="@(() => model.OldPassword)" />

                <RadzenPassword @bind-Value="model.NewPassword"  Placeholder="Mật khẩu mới"  Style="width:100%" PasswordMeter="true"/>
                <ValidationMessage For="@(() => model.NewPassword)" />

                <RadzenPassword @bind-Value="model.ConfirmPassword" Placeholder="Xác nhận mật khẩu" Style="width:100%" />
                <ValidationMessage For="@(() => model.ConfirmPassword)" />
            </RadzenTemplateFormData>

            <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Đổi mật khẩu" Icon="lock" Type="Submit"
                          Style="width:100%;margin-top:1rem"/>
        </EditForm>
    </ChildContent>
</RadzenCard>
</Authorized>
</AuthorizeView>

@code {
    private readonly ChangePassModel model = new();

    private async Task HandleChangeAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user      = authState.User;

        if (!(user?.Identity?.IsAuthenticated ?? false))
        {
            Noti.Notify(NotificationSeverity.Error, "Ôi!", "Bạn chưa đăng nhập.", 4000);
            Nav.NavigateTo("/qlkho/login", forceLoad:true);
            return;
        }

        if (!int.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out var idNguoiDung))
        {
            Noti.Notify(NotificationSeverity.Error, "Lỗi", "Không xác định được người dùng.", 4000);
            return;
        }

        await using var db = await DbFactory.CreateDbContextAsync();
        var nguoiDung = await db.NguoiDungs.FindAsync(idNguoiDung);
        if (nguoiDung is null)
        {
            Noti.Notify(NotificationSeverity.Error, "Không tìm thấy!", "Người dùng không tồn tại.", 4000);
            return;
        }

        /* -------- SO SÁNH MẬT KHẨU CŨ -------- */
        if (!HashingServices.VerifyPassword(model.OldPassword, nguoiDung.Password))
        {
            Noti.Notify(NotificationSeverity.Warning, "Sai mật khẩu cũ!", "Nhập lại dùm mình nha.", 4000);
            return;
        }

        if (model.NewPassword != model.ConfirmPassword)
        {
            Noti.Notify(NotificationSeverity.Warning, "Chưa khớp!", "Mật khẩu mới và xác nhận chưa giống nhau.", 4000);
            return;
        }

        /* -------- CẬP NHẬT MẬT KHẨU MỚI -------- */
        nguoiDung.Password = HashingServices.HashPassword(model.NewPassword);

        await db.SaveChangesAsync();

        Noti.Notify(NotificationSeverity.Success, "Thành công!", "Đổi mật khẩu xong rồi nha!", 4000);
        Nav.NavigateTo("/qlkho/home", replace:true);
    }

    private sealed class ChangePassModel
    {
        [Required(ErrorMessage = "Nhập mật khẩu cũ nha")]
        public string OldPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Mật khẩu mới không được trống")]
        [RegularExpression(
            @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$",
            ErrorMessage = "Phải ≥ 8 ký tự, có hoa-thường-số-ký tự đặc biệt")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Xác nhận mật khẩu đi")]
        [Compare(nameof(NewPassword), ErrorMessage = "Chưa trùng mật khẩu mới")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

}
